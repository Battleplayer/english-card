{"version":3,"sources":["common/drawers/BottomDrawer.tsx"],"names":["FinishedArray","loadable","Root","styled","theme","height","backgroundColor","palette","mode","grey","background","default","StyledBox","Box","Puller","width","borderRadius","position","top","left","BottomDrawer","props","window","useState","open","setOpen","finishedCards","useContext","CardsContext","toggleDrawer","newOpen","container","undefined","document","body","Object","keys","length","styles","overflow","sx","textAlign","pt","onClick","color","variant","anchor","onClose","onOpen","swipeAreaWidth","disableSwipeToOpen","ModalProps","keepMounted","borderTopLeftRadius","borderTopRightRadius","visibility","right","p","px","pb"],"mappings":"yOAWMA,EAAgBC,aAAS,kBAAM,iCAY/BC,EAAOC,YAAO,MAAPA,EAAc,gBAAGC,EAAH,EAAGA,MAAH,MAAgB,CACzCC,OAAQ,OACRC,gBAAwC,UAAvBF,EAAMG,QAAQC,KAAmBC,IAAK,KAAOL,EAAMG,QAAQG,WAAWC,YAGnFC,EAAYT,YAAOU,IAAPV,EAAY,kBAAgB,CAC5CG,gBAAwC,UADZ,EAAGF,MACRG,QAAQC,KAAmB,OAASC,IAAK,SAG5DK,EAASX,YAAOU,IAAPV,EAAY,kBAAgB,CACzCY,MAAO,GACPV,OAAQ,EACRC,gBAAwC,UAHf,EAAGF,MAGLG,QAAQC,KAAmBC,IAAK,KAAOA,IAAK,KACnEO,aAAc,EACdC,SAAU,WACVC,IAAK,EACLC,KAAM,uBA6EOC,UA1EM,SAACC,GACpB,IAAQC,EAAWD,EAAXC,OACR,EAAwBC,oBAAS,GAAjC,mBAAOC,EAAP,KAAaC,EAAb,KAEQC,EAAkBC,qBAAWC,KAA7BF,cAEFG,EAAe,SAACC,GAAD,OAAsB,WACzCL,EAAQK,KAIJC,OAAuBC,IAAXV,EAAuB,kBAAMA,IAASW,SAASC,WAAOF,EAExE,OAAKG,OAAOC,KAAKV,GAAeW,OAG9B,eAACnC,EAAD,WACE,cAAC,IAAD,IACA,cAAC,IAAD,CACEoC,OAAQ,CACN,mCAAoC,CAClCjC,OAAO,cAAD,OAlDK,GAkDL,OACNkC,SAAU,cAIhB,cAAC,IAAD,CAAKC,GAAI,CAAEC,UAAW,SAAUC,GAAI,EAAGpC,gBAAiB,QAAxD,SACE,cAAC,IAAD,CAAQqC,QAASd,GAAa,GAAOe,MAAM,UAAUC,QAAQ,YAA7D,+BAIF,eAAC,IAAD,CACEd,UAAWA,EACXe,OAAO,SACPtB,KAAMA,EACNuB,QAASlB,GAAa,GACtBmB,OAAQnB,GAAa,GACrBoB,eAlEe,GAmEfC,oBAAoB,EACpBC,WAAY,CACVC,aAAa,GATjB,UAYE,eAACxC,EAAD,CACE4B,GAAI,CACFvB,SAAU,WACVC,KA3EW,GA4EXmC,oBAAqB,EACrBC,qBAAsB,EACtBC,WAAY,UACZC,MAAO,EACPrC,KAAM,GARV,UAWE,cAACL,EAAD,IACA,eAAC,IAAD,CAAY0B,GAAI,CAAEiB,EAAG,EAAGb,MAAO,kBAA/B,6BACmBT,OAAOC,KAAKV,GAAeW,aAGhD,cAACzB,EAAD,CACE4B,GAAI,CACFkB,GAAI,EACJC,GAAI,EACJtD,OAAQ,OACRkC,SAAU,QALd,SAQE,cAACvC,EAAD,YAtDuC","file":"static/js/7.883fc6fb.chunk.js","sourcesContent":["import { useContext, useState } from 'react';\nimport { Global } from '@emotion/react';\nimport { styled } from '@mui/material/styles';\nimport { grey } from '@mui/material/colors';\nimport { Box, Button, CssBaseline } from '@mui/material';\nimport Typography from '@mui/material/Typography';\nimport SwipeableDrawer from '@mui/material/SwipeableDrawer';\nimport CardsContext from 'store/context';\n\nimport loadable from '@loadable/component';\n\nconst FinishedArray = loadable(() => import('core/arrays/FinishedArray'));\n\nconst drawerBleeding = 56;\n\ninterface Props {\n  /**\n   * Injected by the documentation to work in an iframe.\n   * You won't need it on your project.\n   */\n  window?: () => Window;\n}\n\nconst Root = styled('div')(({ theme }) => ({\n  height: '100%',\n  backgroundColor: theme.palette.mode === 'light' ? grey[100] : theme.palette.background.default,\n}));\n\nconst StyledBox = styled(Box)(({ theme }) => ({\n  backgroundColor: theme.palette.mode === 'light' ? '#fff' : grey[800],\n}));\n\nconst Puller = styled(Box)(({ theme }) => ({\n  width: 30,\n  height: 6,\n  backgroundColor: theme.palette.mode === 'light' ? grey[300] : grey[900],\n  borderRadius: 3,\n  position: 'absolute',\n  top: 8,\n  left: 'calc(50% - 15px)',\n}));\n\nconst BottomDrawer = (props: Props) => {\n  const { window } = props;\n  const [open, setOpen] = useState(false);\n\n  const { finishedCards } = useContext(CardsContext);\n\n  const toggleDrawer = (newOpen: boolean) => () => {\n    setOpen(newOpen);\n  };\n\n  // This is used only for the example\n  const container = window !== undefined ? () => window().document.body : undefined;\n\n  if (!Object.keys(finishedCards).length) return null;\n\n  return (\n    <Root>\n      <CssBaseline />\n      <Global\n        styles={{\n          '.MuiDrawer-root > .MuiPaper-root': {\n            height: `calc(50% - ${drawerBleeding}px)`,\n            overflow: 'visible',\n          },\n        }}\n      />\n      <Box sx={{ textAlign: 'center', pt: 1, backgroundColor: '#fff' }}>\n        <Button onClick={toggleDrawer(true)} color=\"primary\" variant=\"contained\">\n          Show my results\n        </Button>\n      </Box>\n      <SwipeableDrawer\n        container={container}\n        anchor=\"bottom\"\n        open={open}\n        onClose={toggleDrawer(false)}\n        onOpen={toggleDrawer(true)}\n        swipeAreaWidth={drawerBleeding}\n        disableSwipeToOpen={false}\n        ModalProps={{\n          keepMounted: true,\n        }}\n      >\n        <StyledBox\n          sx={{\n            position: 'absolute',\n            top: -drawerBleeding,\n            borderTopLeftRadius: 8,\n            borderTopRightRadius: 8,\n            visibility: 'visible',\n            right: 0,\n            left: 0,\n          }}\n        >\n          <Puller />\n          <Typography sx={{ p: 2, color: 'text.secondary' }}>\n            Finished cards: {Object.keys(finishedCards).length}\n          </Typography>\n        </StyledBox>\n        <StyledBox\n          sx={{\n            px: 2,\n            pb: 2,\n            height: '100%',\n            overflow: 'auto',\n          }}\n        >\n          <FinishedArray />\n        </StyledBox>\n      </SwipeableDrawer>\n    </Root>\n  );\n};\n\nexport default BottomDrawer;\n"],"sourceRoot":""}